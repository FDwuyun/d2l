==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Sequential                               [1, 10]                   --
├─Conv2d: 1-1                            [1, 6, 24, 24]            156
├─BatchNorm: 1-2                         [1, 6, 24, 24]            12
├─Sigmoid: 1-3                           [1, 6, 24, 24]            --
├─AvgPool2d: 1-4                         [1, 6, 12, 12]            --
├─Conv2d: 1-5                            [1, 16, 8, 8]             2,416
├─BatchNorm: 1-6                         [1, 16, 8, 8]             32
├─Sigmoid: 1-7                           [1, 16, 8, 8]             --
├─AvgPool2d: 1-8                         [1, 16, 4, 4]             --
├─Flatten: 1-9                           [1, 256]                  --
├─Linear: 1-10                           [1, 120]                  30,840
├─BatchNorm: 1-11                        [1, 120]                  240
├─Sigmoid: 1-12                          [1, 120]                  --
├─Linear: 1-13                           [1, 84]                   10,164
├─BatchNorm: 1-14                        [1, 84]                   168
├─Sigmoid: 1-15                          [1, 84]                   --
├─Linear: 1-16                           [1, 10]                   850
==========================================================================================
Total params: 44,878
Trainable params: 44,878
Non-trainable params: 0
Total mult-adds (M): 0.29
==========================================================================================
Input size (MB): 0.00
Forward/backward pass size (MB): 0.08
Params size (MB): 0.18
Estimated Total Size (MB): 0.26
==========================================================================================
Conv2d output shape:	 torch.Size([1, 6, 24, 24])
BatchNorm output shape:	 torch.Size([1, 6, 24, 24])
Sigmoid output shape:	 torch.Size([1, 6, 24, 24])
AvgPool2d output shape:	 torch.Size([1, 6, 12, 12])
Conv2d output shape:	 torch.Size([1, 16, 8, 8])
BatchNorm output shape:	 torch.Size([1, 16, 8, 8])
Sigmoid output shape:	 torch.Size([1, 16, 8, 8])
AvgPool2d output shape:	 torch.Size([1, 16, 4, 4])
Flatten output shape:	 torch.Size([1, 256])
Linear output shape:	 torch.Size([1, 120])
BatchNorm output shape:	 torch.Size([1, 120])
Sigmoid output shape:	 torch.Size([1, 120])
Linear output shape:	 torch.Size([1, 84])
BatchNorm output shape:	 torch.Size([1, 84])
Sigmoid output shape:	 torch.Size([1, 84])
Linear output shape:	 torch.Size([1, 10])

learning_rate = 1.0, num_epochs = 10, batch_size = 256

training on cuda:0
1.1 sec, [epoch: 0] train_loss: 0.730, train_acc: 0.737, test_acc: 0.753
2.1 sec, [epoch: 1] train_loss: 0.469, train_acc: 0.829, test_acc: 0.691
3.0 sec, [epoch: 2] train_loss: 0.402, train_acc: 0.854, test_acc: 0.819
4.0 sec, [epoch: 3] train_loss: 0.359, train_acc: 0.869, test_acc: 0.807
4.9 sec, [epoch: 4] train_loss: 0.334, train_acc: 0.878, test_acc: 0.735
5.8 sec, [epoch: 5] train_loss: 0.315, train_acc: 0.884, test_acc: 0.792
6.7 sec, [epoch: 6] train_loss: 0.297, train_acc: 0.891, test_acc: 0.818
7.7 sec, [epoch: 7] train_loss: 0.286, train_acc: 0.894, test_acc: 0.785
8.6 sec, [epoch: 8] train_loss: 0.274, train_acc: 0.898, test_acc: 0.848
9.5 sec, [epoch: 9] train_loss: 0.265, train_acc: 0.902, test_acc: 0.824
[Total] loss 0.265, train acc 0.902,test acc 0.824
[Total] 9.5 sec, 63225.1 examples/secon cuda:0
